#!/usr/bin/env node

const fs         = require("fs")
const d3         = require("d3")
const assignWith = require("lodash/assignWith")
const isNull     = require("lodash/isNull")
const assert     = require("assert")

// Read the data
const FILE = "./ehr-raw.csv"
const text = fs.readFileSync(FILE, { encoding : "utf8" })
const rows = d3.csvParse(text)

const DEFAULTED = "No valid match found.  Defaulted"
const normalizeGender = ({ gender }) => gender === DEFAULTED ? null : gender.toLowerCase()
const normalizeInjuryDate = ({ injuryDate }) => Date.parse(injuryDate)
const normalize = row => ({
  id     : row.id,
  gender : normalizeGender(row),
  injury : {
    age  : parseInt(row.ageInjury),
    date : normalizeInjuryDate(row),
  },
  encounters : [{
    id  : row.encounterId,
    age : parseInt(row.age, 10)
  }],
})

// Reorganize the data
const constantMerge = (patient, row, field) => {
  if (isNull(patient[field])) return row[field]
  if (isNull(row[field]))     return patient[field]
  assert.deepEqual(row[field], patient[field], `Field ${field} is not constant for ${row.id}: ${patient[field]} -> ${row[field]}`)
  return patient[field]
}

const merge = (patient, row) => {
  if (!patient) return row
  return {
    id         : patient.id,
    gender     : constantMerge(patient, row, "gender"),
    injury     : constantMerge(patient, row, "injury"),
    encounters : [ ...patient.encounters, ...row.encounters ],
  }
}

const data = assignWith(...rows.map(r => ({ [r.id] : normalize(r) })), merge)

console.log(JSON.stringify(data, undefined, 2))
